---
interface CallToAction {
  label: string;
  href: string;
}

import CtaButton from "@components/CTA/CtaButton.astro";
import Icon from "@components/Icon/Icon.astro";

interface Props {
  eyebrow?: string;
  title: string;
  content: string;
  primaryCta?: CallToAction;
  secondaryCta?: CallToAction;
  tertiaryCta?: CallToAction;
  image?: {
    src: string;
    alt?: string;
  };
}

const {
  eyebrow,
  title,
  content,
  primaryCta,
  secondaryCta,
  tertiaryCta,
  image,
} = Astro.props as Props;

const ctaCards = [primaryCta, secondaryCta, tertiaryCta].filter(
  Boolean
) as CallToAction[];
const ctaIcons = ["depannage", "accessoires", "whoweare", "velux"] as const;

const splitWithIcon = (value: string) =>
  value
    .split(/(velux)/gi)
    .map((piece) =>
      /velux/i.test(piece) ? { type: "icon" } : { type: "text", content: piece }
    );

const backgroundStyle = image
  ? `background-image: url(${image.src});`
  : undefined;
---

<section class="hero" style={backgroundStyle}>
  <div class="hero__content">
    <div class="copy">
      {eyebrow && <span class="eyebrow">{eyebrow}</span>}
      <h1>
        {
          splitWithIcon(title).map((chunk) =>
            chunk.type === "icon" ? (
              <span class="inlineIcon">
                <Icon type="velux" />
              </span>
            ) : (
              chunk.content
            )
          )
        }
      </h1>
      <p set:html={content} />
      <div class="cta-primary">
        <CtaButton />
      </div>
    </div>

    {
      ctaCards.length > 0 && (
        <ul class="cta-cards">
          {ctaCards.map((cta, index) => (
            <li>
              <a href={cta.href} class="cta-card">
                <span class="cta-card__icon" aria-hidden="true">
                  <Icon type={ctaIcons[index] ?? "depannage"} />
                </span>
                <span class="cta-card__label">{cta.label}</span>
              </a>
            </li>
          ))}
        </ul>
      )
    }
  </div>
</section>

<style>
  .hero {
    position: relative;
    min-height: calc(100vh - 3rem);
    padding: 0 var(--space-3);
    display: flex;
    align-items: center;
    justify-content: center;
    background-size: cover;
    background-position: center;
    background-repeat: no-repeat;
    background-color: var(--color-text);
    color: var(--color-nav);
  }

  .hero::before {
    content: "";
    position: absolute;
    inset: 0;
    background: linear-gradient(
      180deg,
      rgba(0, 0, 0, 0.25),
      rgba(0, 0, 0, 0.55)
    );
    pointer-events: none;
  }

  .hero__content {
    position: relative;
    z-index: 1;
    display: flex;
    flex-direction: column;
    align-items: stretch;
    gap: var(--space-4);
    text-align: center;
  }

  .copy {
    display: flex;
    flex-direction: column;
    gap: var(--space-2);
  }

  .copy h1 {
    margin: 0;
    line-height: 1.1;
    font-size: var(--step-5);
    text-shadow: 0 4px 16px rgba(0, 0, 0, 0.65);
    font-family: var(fontBold);
  }

  .copy p {
    margin: 0;
    font-size: var(--step-0);
    text-shadow: 0 3px 12px rgba(0, 0, 0, 0.6);
  }

  .copy p strong,
  .copy p em {
    color: var(--color-secondary);
  }

  .eyebrow {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    gap: 0.5rem;
    align-self: center;
    font-weight: 600;
    font-size: var(--step--1);
    letter-spacing: 0.12em;
    text-transform: uppercase;
    color: var(--color-secondary);
  }

  .cta-primary {
    display: flex;
    justify-content: center;
  }

  .cta-cards {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: var(--space-2);
  }

  .cta-card {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    padding: var(--space-2);
    background: rgba(0, 0, 0, 0.72);
    border: 2px solid var(--color-primary);
    font-weight: 600;
    font-size: var(--step-1);
    letter-spacing: 0.05em;
    color: var(--color-background);
    text-transform: uppercase;
    transition:
      transform 0.2s ease,
      box-shadow 0.2s ease;
    gap: var(--space-1);
  }

  .cta-card:hover,
  .cta-card:focus-visible {
    transform: translateY(-4px);
    box-shadow: 0 10px 24px rgba(0, 0, 0, 0.35);
  }

  .cta-card__icon {
    width: var(--step-4);
    height: var(--step-4);
    border-radius: 0.9rem;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 2rem;
  }

  .cta-card__icon :global(svg) {
    width: var(--step-4);
    height: var(--step-4);
    display: block;
  }

  .cta-card__label {
    flex: 1;
    text-align: center;
  }

  .inlineIcon {
    display: inline-flex;
    width: var(--step-velux);
    vertical-align: middle;
  }

  .inlineIcon :global(svg) {
    width: 100%;
    height: 100%;
    display: block;
  }

  .accent {
    color: var(--color-primary);
  }

  @media (min-width: 960px) {
    .hero {
      min-height: calc(100vh - var(--space-4));
      padding-block: var(--space-5);
    }

    .hero__content {
      width: min(600px, 100%);
    }

    .cta-cards {
      gap: var(--space-3);
    }

    .cta-card {
      font-size: var(--step-2);
      gap: var(--space-1);
    }
  }
</style>
